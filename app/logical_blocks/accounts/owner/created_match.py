from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import logging

# Import required modules
import ClassesStatesMachine.SG as SG
from ClassesStatesMachine.SG import update_state
from app.MyException import InvalidMatchNumberFormatError

from app.DatabaseWork.models_master import UserManager, MatchesManager
from app.DatabaseWork.models_match import MatchManager

from app import Data_type_map

from app.decorators.message import MessageManager
from app.keyboards.accounts.owner import created_match as kb
from app.utils import callback_utils


logger = logging.getLogger(__name__)

router = Router()
user_manager = UserManager()
matches_manager = MatchesManager()
match_manager = MatchManager()

PREFIXES = {
    "SETTING": "SettingsMat—Åhes",
    "CREATED": "CreatedMatch",
    "DELETED": "DeletedMatch",
    "CATEGORY": "CategoryMatch",
    "TYPE_MAP": "TypeMap"
}

OWNER_ID = '5311154389'

# üîπ –®–∞–±–ª–æ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤ —à–∞–≥–æ–≤
STEP_TEXTS = {
    1: "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ç—á–∞:</b>\n{data_form}",
    2: "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç—á–∞:</b>\n{data_form}",
    3: "<b>–í—ã–±–µ—Ä–∏—Ç–µ ID –í–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞—Ç—á–∞:</b>\n{data_form}",
    4: "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã –¥–ª—è –º–∞—Ç—á–∞:</b>\n{data_form}",
    5: "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>\n{data_form}"
}


async def send_match_step(callback, state, step: int, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞."""
    message_manager = MessageManager(bot=callback.bot, state=state)
    data_form = await state.get_data()

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    for key, value in kwargs.items():
        if value is not None:
            data_form[key] = value

    owner_match = '' if step < 3 else ('My' if data_form.get('id_user_owner_match') == OWNER_ID else 'Partner')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç —ç—Ç–∞–ø–æ–≤ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
    steps_text = (
        f"{step}/5 –≠–¢–ê–ü\n"
        f"{'<b>1 –≠—Ç–∞–ø - ‚Ññ –ú–∞—Ç—á–∞:</b>' if step == 1 else '1 –≠—Ç–∞–ø - ‚Ññ –ú–∞—Ç—á–∞:'} {data_form.get('number_match', '')}\n"
        f"{'<b>2 –≠—Ç–∞–ø - –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b>' if step == 2 else '2 –≠—Ç–∞–ø - –ö–∞—Ç–µ–≥–æ—Ä–∏—è:'} {owner_match}\n"
        f"3 –≠—Ç–∞–ø - ID –í–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞—Ç—á–∞: {data_form.get('id_user_owner_match', '')}\n"
        f"{'<b>4 –≠—Ç–∞–ø - –¢–∏–ø –∫–∞—Ä—Ç—ã:</b>' if step == 4 else '4 –≠—Ç–∞–ø - –¢–∏–ø –∫–∞—Ä—Ç—ã:'} {data_form.get('type_map', '')}\n"
        f"{'<b>5 –≠—Ç–∞–ø - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è:</b>' if step == 5 else '5 –≠—Ç–∞–ø - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è:'}\n\n"
    )

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"{steps_text}{STEP_TEXTS.get(step, '!–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ! –Ω–∞ –∫–∞–∫–æ–º –≤—ã —ç—Ç–∞–ø–µ?').format(data_form=data_form)}"
    keyboard = await kb.created_match_step(number_step=step)

    await message_manager.send_photo(
        obj=callback,
        text=text,
        keyboard=keyboard,
        remove_previous=True
    )


@router.callback_query(lambda c: c.data and c.data.startswith(f'{PREFIXES['SETTING']}_'))
async def setting_matches_for_owner(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç—á–µ–π –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞"""
    await callback.answer()

    event = callback_utils.parse_callback_data(callback.data, PREFIXES["SETTING"])[0]
    message_manager = MessageManager(bot=callback.bot, state=state)
    keyboard = await kb.menu_setting_matches()

    await message_manager.send_photo(
        obj=callback,
        text='<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç—á–∞</b>',
        keyboard=keyboard,
        remove_previous=True,
        clear_state_all_exception_photo_message_id=True if event == 'back' else False
    )


@router.callback_query(F.data == f'{PREFIXES['CREATED']}')
async def start_created_match(callback: CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –º–∞—Ç—á–∞. 1/4 —ç—Ç–∞–ø–æ–≤"""
    await state.set_state(SG.FormCreatedMatch.number_match)
    await send_match_step(callback, state, 1)


@router.message(SG.FormCreatedMatch.number_match)
async def created_match(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç—á–∞. 2/4 —ç—Ç–∞–ø–æ–≤"""
    input_number_match = message.text.strip()

    try:
        if not input_number_match.isdigit() or len(input_number_match) != 7:
            raise InvalidMatchNumberFormatError('–ù–æ–º–µ—Ä –º–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, —Å–æ—Å—Ç–æ—è—â–∏–º –∏–∑ —Ä–æ–≤–Ω–æ 7 —Ü–∏—Ñ—Ä.')

        input_number_match = int(input_number_match)

        if await matches_manager.match_exists(number_match=input_number_match):
            raise InvalidMatchNumberFormatError('–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –º–∞—Ç—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

        await update_state(state, number_match=input_number_match)
        await state.set_state(SG.FormCreatedMatch.id_user_owner_match)
        await send_match_step(message, state, 2, number_match=input_number_match)

    except InvalidMatchNumberFormatError as error:
        await callback_utils.handle_exception(message,
        'choice_type_match', error,
        '‚ùå<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –º–∞—Ç—á–∞.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )
        return


@router.callback_query(lambda c: c.data and c.data.startswith(f'{PREFIXES['CATEGORY']}_'))
async def choice_owner_match(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç—á–∞. 2/4 —ç—Ç–∞–ø–æ–≤"""
    id_user_owner_match = callback_utils.parse_callback_data(callback.data, PREFIXES["CATEGORY"])[0]
    if id_user_owner_match == 'my':
        await choice_my_owner_match(callback=callback, state=state)
    elif id_user_owner_match == 'partner':
        await choice_partner_owner_match(message=callback.message, state=state)


async def choice_my_owner_match(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞—Ç—á–∞. 3/4 —ç—Ç–∞–ø–æ–≤. –í—ã–±—Ä–∞–ª–∏ - My"""
    await update_state(state, id_user_owner_match=OWNER_ID)
    await state.set_state(SG.FormCreatedMatch.type_map)
    await send_match_step(callback, state, 4, id_user_owner_match=OWNER_ID)


async def choice_partner_owner_match(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞—Ç—á–∞. 3/4. –í—ã–±—Ä–∞–ª–∏ - Partner"""
    message_manager = MessageManager(bot=message.bot, state=state)

    await message_manager.send_photo(
        obj=message,
        text='<b>–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –í–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞—Ç—á–∞: first_name, last_name, username, telegram_id</b>',
        remove_previous=True
    )


@router.message(SG.FormCreatedMatch.id_user_owner_match)
async def partner_owner_match(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞—Ç—á–∞. 3/4. –í–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ - Partner"""
    search_parameter_owner_match = message.text.strip()

    data_user = None

    if search_parameter_owner_match.isdigit():
        telegram_id = int(search_parameter_owner_match)
        logger.info("üì∂ –í–≤–µ–¥—ë–Ω —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (Telegram ID)")
        data_user = await user_manager.get_user(telegram_id=telegram_id)

    else:
        for field in ["first_name", "last_name", "username"]:
            logger.info(f'üì∂ get_user from partner_owner_match: trying {field}')
            data_user = await user_manager.get_user(**{field: search_parameter_owner_match})

            if data_user:
                break

    if data_user:
        id_user_owner_match = data_user['telegram_id']
        await update_state(state, id_user_owner_match=id_user_owner_match)
        await state.set_state(SG.FormCreatedMatch.type_map)
        await send_match_step(message, state, 4, id_user_owner_match=id_user_owner_match)

    else:
        logger.info("üì∂ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await choice_partner_owner_match(message=message, state=state)


@router.callback_query(lambda c: c.data and c.data.startswith(f'{PREFIXES['TYPE_MAP']}_'))
async def choice_type_map(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã. 4/4 —ç—Ç–∞–ø–æ–≤."""
    input_type_map = callback_utils.parse_callback_data(callback.data, PREFIXES["TYPE_MAP"])[0]
    await update_state(state, type_map=input_type_map)
    await send_match_step(callback, state, 5, type_map=input_type_map)


@router.callback_query(F.data == 'confirm_creation')
async def confirm_match_creation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        message_manager = MessageManager(bot=callback.message.bot, state=state)

        await message_manager.send_photo(
            obj=callback,
            text='–ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ä–µ–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞—Ç—á–∞.',
            remove_previous=True
        )

        data_created_match = await state.get_data()

        if data_created_match is None:
            await start_created_match(callback, state)

        number_match = data_created_match['number_match']
        id_user_owner_match = data_created_match['id_user_owner_match']
        type_map = data_created_match['type_map']

        try:

            created_num = await matches_manager.create_match(
                number_match=number_match,
                id_user_owner_match=id_user_owner_match,
                type_map=type_map
            )

            if not created_num:
                raise Exception("–û—à–∏–±–∫–∞: –º–∞—Ç—á –Ω–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ master.db!")

            if type_map == '–í–µ–ª–∏–∫–∞—è–í–æ–π–Ω–∞':
                type_map = Data_type_map.The_Great_War
            elif type_map == '–í–æ–π–Ω–∞–í–û–≥–Ω–µ':
                type_map = Data_type_map.War_in_Fire
            else:
                Exception('–û—à–∏–±–∫–∞: Type_map –ø—É—Å—Ç.')

            await match_manager.initialize_match(
                number_match=number_match,
                id_user_owner_match=id_user_owner_match,
                type_map=type_map
            )
        except Exception as error:
            await callback.message.answer(str(error))

        message_manager = MessageManager(bot=callback.message.bot, state=state)

        await message_manager.send_photo(
            obj=callback,
            text=f'<b>–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è –º–∞—Ç—á–∞:</b> {data_created_match["number_match"]} <b>—Å–æ–∑–¥–∞–Ω–∞.</b>',
            remove_previous=True,
            clear_state_all_exception_photo_message_id=True
        )
    except Exception as error:
        await callback_utils.handle_exception(callback, 'confirm_match_creation', error, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ä–µ–¥—ã –¥–ª—è –º–∞—Ç—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


@router.callback_query(F.data == "restart_creation")
async def restart_match_creation(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞, —É–¥–∞–ª—è—è –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã state, –∫—Ä–æ–º–µ photo_message_id."""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    state_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo_message_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    photo_message_id = state_data.get("photo_message_id")

    # –û—á–∏—â–∞–µ–º state
    await state.clear()

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ photo_message_id
    if photo_message_id is not None:
        await state.update_data(photo_message_id=photo_message_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞
    await start_created_match(callback, state)

