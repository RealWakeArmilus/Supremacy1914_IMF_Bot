from aiogram import Router
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import logging

# import keyboards
import app.keyboards.lobby as kb_lobby

# import verify
import app.verify.checks as checks

# import ClassState
from app.decorators.message import MessageManager
from app.config import CHANNEL_USERNAME

# ManagerDatabase
from app.DatabaseWork.models_master import UserManager
from app.DatabaseWork.models_master import MatchesManager
from app.DatabaseWork.models_match import MatchManager

# –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ –¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥ –∏–¥–µ—Ç –∑–¥–µ—Å—å
logger = logging.getLogger(__name__)
router = Router()
user_manager = UserManager()

# import routers from logical_blocks
from app.logical_blocks.accounts.account import router as account_router
from app.logical_blocks.accounts.owner.setting_match import router as created_match_router
from app.logical_blocks.settings_match import router as settings_match_router
from app.logical_blocks.choice_country import router as choice_state_router

# connect routers from logical_blocks
router.include_router(account_router)
router.include_router(created_match_router)
router.include_router(settings_match_router)
router.include_router(choice_state_router)


@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    if message.chat.type != 'private' or message.from_user.is_bot:
        return

    user_id = message.from_user.id

    logger.info('üì∂get_user from /start: connect')

    get_user_task = user_manager.get_user(telegram_id=user_id)
    is_subscribed_task = checks.identify_subscription(bot=message.bot, user_id=user_id)

    data_user = await get_user_task
    is_subscribed = await is_subscribed_task

    if data_user is None:
        text = (
            '<b>–ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ–±–ª—é–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è:</b>\n\n'
            '<i><a href="—Å—Å—ã–ª–∫–∞">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a></i>\n'
            '<i><a href="—Å—Å—ã–ª–∫–∞">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a></i>'
        )
        await message.answer(
            text=text,
            parse_mode='html'
        )

        logger.info('üì∂set_user from /start: connect')
        await user_manager.set_user(
            telegram_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            start_premium=None,
            end_premium=None,
            count_premium=0
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ë–î
    if not is_subscribed:
        text = (
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ - –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª "
            "<b>Supremacy1914_IMF_Channel</b> üòâüí´\n\n"
            "–ú—ã —Ç—É—Ç –æ–±—â–∞–µ–º—Å—è, –æ–±—Å—É–∂–¥–∞–µ–º –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É!\n\n"
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –ø–æ —Å—Å—ã–ª–∫–µ: https://t.me/Supremacy1914_IMF_Channel ‚ú®\n\n"
            "<b>–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</b>\n\n"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="check_sub")]
        ])

        await message.answer(text=text, reply_markup=keyboard, parse_mode='html')
        return

    await menu_open(message, state)


@router.callback_query(lambda c: c.data == "check_sub")
async def check_sub_again(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"""
    user_id = callback.from_user.id
    is_subscribed = await checks.identify_subscription(
        bot=callback.message.bot,
        user_id=user_id
    )

    if is_subscribed:
        await menu_open(callback.message, state)
    else:
        await callback.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!", show_alert=True)


@router.callback_query(lambda c: c.data == "menu")
async def check_sub_again(callback: CallbackQuery, state: FSMContext):
    await menu_open(message=callback.message, state=state)


@router.message(Command('menu'))
async def menu_open(message: Message, state: FSMContext):
    user_id = message.from_user.id
    is_subscribed = await checks.identify_subscription(
        bot=message.bot,
        user_id=user_id
    )

    if is_subscribed:
        photo_path = 'image/logo.png'
        keyboard = await kb_lobby.main_lobby()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å MessageManager –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_manager = MessageManager(bot=message.bot, state=state)
        await message_manager.send_photo(
            obj=message,
            photo_path=photo_path,
            keyboard=keyboard,
            remove_previous=True
        )
